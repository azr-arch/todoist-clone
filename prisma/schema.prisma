// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Task {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkUserId   String
  userEmail     String?  

  title         String
  description   String?
  dueDate       DateTime?
  // Add assignee, priority, reminders, location (its for premium usrs on og site) 
  sectionType   String

  order         Int
  isCompleted   Boolean @default(false)

  sectionId     String? @db.Uuid
  section       Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade) 

  labels        TaskLabels[]

  priority      Priority @default(p4)

  projectId     String? @db.Uuid
  project       Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  notificationSent   Boolean @default(false)
 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([title])
}

model TaskLabels {
  label         Label @relation(fields: [labelId], references: [id], onDelete: Cascade)
  labelId       String @db.Uuid

  task          Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        String @db.Uuid

  @@id([taskId, labelId])
}


model Label {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  color         String

  clerkUserId   String
  userEmail     String?  

  order         Int

  tasks         TaskLabels[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([name])
}

model Filter {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  query         String
  color         String

  clerkUserId   String
  userEmail     String?  

  order         Int

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([name])
}
model Section {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkUserId   String
  title         String
  tasks         Task[] 
  order         Int

  projectId     String? @db.Uuid
  project       Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Maybe isArchive ?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Project {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkUserId   String
  name          String
  color         String

  tasks         Task[]
  sections      Section[]

   createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Priority {
  p1
  p2
  p3
  p4
}

enum ACTION {
  COMPLETE
  // for later use
  DELETE
  UPDATE
}
model AuditLog {
  id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  action         ACTION
  taskId         String
  taskTitle      String
  clerkUserId    String
  userImage      String @db.String()
  userName       String @db.String()

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


